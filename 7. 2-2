tuple<TasksInfo, TasksInfo> PerformPersonTasks(const string& person, int task_count){
        
        TasksInfo updated_tasks;
        TasksInfo untoched_tasks = all_tasks_[person];

        int max_count = 0;
        int task_to_update = task_count;
        
        for (auto& task : all_tasks_[person]){
            max_count += task.second;
        }

        if (task_count > max_count)
        {
            task_count = max_count;
        }

        int update = 0;
        int tasks_in_current_status = 0;

        for (size_t i = 0; i < STATUSES.size()-1; i++){
            
            if (task_to_update == 0){
                break;
            }
            
            tasks_in_current_status = all_tasks_[person][STATUSES[i]];
            
            if (task_to_update > tasks_in_current_status){
                update = tasks_in_current_status;
            }
            else{
                update = task_to_update;
            }

            untoched_tasks[STATUSES[i]] -= update;
            updated_tasks[STATUSES[i+1]] += update;

            task_to_update -= update;
        }

        for(size_t i = 0; i < STATUSES.size() - 1; i++){
            all_tasks_[person][STATUSES[i]] -= updated_tasks[STATUSES[i+1]];
            all_tasks_[person][STATUSES[i+1]] += updated_tasks[STATUSES[i+1]];
        } 
        
        TasksInfo untoched_tasks_a = untoched_tasks;
        TasksInfo updated_tasks_a = updated_tasks;

        for (const auto& task : untoched_tasks_a){
            if (task.second == 0){
                untoched_tasks.erase(task.first);
            }
        }
        
        for (const auto& task : updated_tasks_a){
        if (task.second == 0){
                updated_tasks.erase(task.first);
            }
        }
        
        untoched_tasks.erase(STATUSES[3]);
        return make_tuple(updated_tasks, untoched_tasks);
    }
